// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  OPEN
  PENDING
  CLOSED
  CANCELLED
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  productCategories ProductCategory[]
  products          Product[]
  customers         Customer[]
  orders            Order[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name])
  @@map("product_category")
}

model Product {
  id         String          @id @default(uuid())
  name       String
  price      Decimal
  image      String?
  user       User            @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId     String
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  orderItems OrderItem[]

  @@unique([name])
  @@map("product")
}

model Customer {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String?  @unique
  line      String?  @unique
  phone     String?  @unique
  address   String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@unique([name, email, line, phone])
  @@map("customer")
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: NoAction)
  customerId  String
  user        User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(CLOSED)
  remark      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("order")
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId String
  quantity  Int
  price     Decimal
  remark    String?

  @@map("order_item")
}
